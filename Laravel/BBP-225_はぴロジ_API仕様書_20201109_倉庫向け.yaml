openapi: "3.0.3"
info:
  version: "2021-02-01"
  title: "ASIMSプラネットAPI一覧"
  description: ""
servers:
- url: hapilogi.com/hapi/api/2021-02-01
  description: "はぴロジプラネットAPI"
tags:
- name: "ログイン認証"
- name: "チャット"
- name: "郵便番号検索"
paths:
  /authentication:
    post:
      tags:
      - "ログイン認証"
      summary: "ログイン"
      description:
        ログインの処理を行います
        成功した場合、各処理実行時にhttpヘッダに含める必要のある認証ACCESS_TOKENが返却されます。
      operationId: "login"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                login_id:
                  type: "string"
                password:
                  type: "string"
                company_id:
                  type: "string"
            example:
              login_id: "test@example.com"
              password: "********"
              company_id: "43512"
      responses:
        '200':
          $ref: '#/components/responses/LoginComplete'
        '400':
          $ref: '#/components/responses/400LoginError'
        '401':
          $ref: '#/components/responses/401Error'
        '404':
          $ref: '#/components/responses/404Error'
        '405':
          $ref: '#/components/responses/405Error'
        '415':
          $ref: '#/components/responses/415Error'
  /chat_threads/{chat_thread_id}/chat_contents:
    put:
      tags:
      - "チャット"
      summary: "チャット投稿"
      description: "チャットの投稿を行います。この機能はBWのアカウントでしか使用できません。"
      operationId: "chat_put"
      parameters: 
        - name: "AccessToken"
          in: "header"
          description: "認証トークン"
          required: true
          schema:
            type: "string"
        - name: "chat_thread_id"
          in: "path"
          description: "チャットスレッド番号"
          required: true
          schema:
            type: "integer"
            format: "int64"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                message:
                  type: "string"
            example:
              message: "
                割り込み失礼します。現在お話している内容の解決策は以下の手順を実行してください。
                1. ～～画面にアクセスする。
                ...
              "
      responses:
        '200':
          $ref: '#/components/responses/ChatPutComplete'
        '400':
          $ref: '#/components/responses/400ChatPutError'
        '401':
          $ref: '#/components/responses/401Error'
        '404':
          $ref: '#/components/responses/404Error'
        '405':
          $ref: '#/components/responses/405Error'
        '415':
          $ref: '#/components/responses/415Error'
  /zip_code/{zip_code_str}:
    get:
      tags:
      - "郵便番号検索"
      summary: "郵便番号からの住所検索"
      description: "郵便番号→住所の検索を行います。"
      operationId: "zip_get"
      parameters: 
        - name: "AccessToken"
          in: "header"
          description: "認証トークン"
          required: true
          schema:
            type: "string"
        - name: "zip_code_str"
          in: "path"
          description: "郵便番号(ハイフンなし7桁)"
          required: true
          schema:
            type: "string"
      responses:
        '200':
          $ref: '#/components/responses/ZipGetComplete'
        '400':
          $ref: '#/components/responses/400ZipGetError'
        '401':
          $ref: '#/components/responses/401Error'
        '404':
          $ref: '#/components/responses/404Error'
        '405':
          $ref: '#/components/responses/405Error'
        '415':
          $ref: '#/components/responses/415Error'
components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
        errorCode:
          type: string
        message:
          type: string
        contents:
          type: object
  responses:
    LoginComplete:
      description: "ログインに成功しました"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              status:
                type: "integer"
              errorCode:
                type: "string"
              message:
                type: "string"
              contents:
                type: "object"
                properties:
                  access_token:
                    type: "string"
          example:
            status: 0
            errorCode: ""
            message: ""
            contents:
              access_token: 12ab34cd34ac2d4ac2...
    ChatPutComplete:
      description: "チャットを投稿に成功しました"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              status:
                type: "integer"
              errorCode:
                type: "string"
              message:
                type: "string"
              contents:
                type: "object"
                properties:
                  result:
                    type: "boolean"
          example:
            status: 0
            errorCode: ""
            message: ""
            contents:
              result: true
    ZipGetComplete:
      description: "住所の取得に成功しました"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              status:
                type: "integer"
              errorCode:
                type: "string"
              message:
                type: "string"
              contents:
                type: "object"
                properties:
                  prefecture_code:
                    type: "integer"
                  address1:
                    type: "string"
                  address2:
                    type: "string"
          example:
            status: 0
            errorCode: ""
            message: ""
            contents:
              result: 
                prefecture_code: 1
                address1: "北海道"
                address2: "都道府県以下の住所"
    400GeneralError:
      description: "API特有のエラーが発生しました"    
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: 9
            errorCode: "400"
            message: "不正があった内容が記載される"
            contents: "{【リクエストボディの内容】}"
    400LoginError:
      description: "ログインに失敗しました"    
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: 9
            errorCode: "400"
            message: "ログインに失敗しました"
            contents: "{【リクエストボディの内容】 からパスワードを省いたもの}"
    400ChatPutError:
      description: "チャットの投稿に失敗しました"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: 9
            errorCode: "400"
            message: "チャットの投稿に失敗しました"
            contents: "{【リクエストボディの内容】}"
    400ZipGetError:
      description: "住所の取得に失敗しました"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: 9
            errorCode: "400"
            message: "住所の取得に失敗しました"
            contents: "{【リクエストボディの内容】}"
    401Error:
      description: "認証に失敗しました"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: 9
            errorCode: "401"
            message: "Unauthorized request."
            contents: "{【リクエストボディの内容】}"
    404Error:
      description: "指定した操作が存在しません"
    405Error:
      description: "指定した操作は許可されていません"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: 9
            errorCode: "405"
            message: "Requested method {【リクエストで指定されたメソッド】} is not allowed."
            contents: "{【リクエストボディの内容】}"
    409Error:
      description: "指定の操作は実行済みです"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: 9
            errorCode: "409"
            message: "This resource's unique key [【リクエストで指定されたContent-Type】] is already exist."
            contents: "{【リクエストボディの内容】}"
    415Error:
      description: "Content-Typeが不正です"
      content:
        application/json:
          schema:
            $ref: '#/components/responses/415Error'
          examples:
            empty:
              summary: Content-Type未設定の場合
              value:
                status: 9
                errorCode: "415"
                message: Content-Type is required.
                contents: "{【リクエストボディの内容】}"
            not-json:
              summary: Content-Typeが異なる場合
              value:
                status: 9
                errorCode: "415"
                message: 【リクエストで指定されたContent-Type】 is not acceptable.
                contents: "{【リクエストボディの内容】}"

