H氏
「今のままでは、来週に結合テストのベンダーに渡せる状態ではありません。
作る時に、『何を正として作っていいか分からない』というのも問題になっています。」

「今更かよ！」感が凄い。
何度も指摘してるやん。
設計書作成段階から何回も言ってるやん。






打ち合わせをやってて、H氏に対してよく感じるのは、

・何故今更そんな質問が？　そこをクリアにせずに、外部APIはどう作ったの？　どう指示したの？　どんなロジックにしたの？？（⇒石井さんと一緒に、中身を少しずつクリアにしていきたい）
・「ASIMS3 は、ASIMS2 を無視して作っている」とのことだが、こういったそれなりに複雑な仕様を、過去の失敗を参考にせず、「新規に書き起こせば、前回よりもいいものを作ることができる」と考えている根拠は何？
　なぜ「さらに悪い物を作ってしまう」という危険性を考慮していないのか。そんなに自分に自信があるのか、ASIMS2 を相当悪質だと思っているのか。（ロクに見もしないのに）



〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓

php artisan schema:dump

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓


============================================================

DBのスキーマ変更を垣花が引き受けていますが、しばらくは引き続き垣花の方で引き取った方が良さそうです。

＜理由＞
・上手く行かなかった時、調査が大変
意図通りに上手く行かない事があったとしても、
それが自分のコードに問題があるのか、Laravel 側の都合による問題なのか、MySQL側の都合の問題なのか、
切り分けが非常に難しいケースに、よく遭遇する。
また、妙なバッドノウハウが多い（「知らないとハマる」出来事に、よく遭遇する）

（例）
「tynyintをロールバックすると（特定の条件が揃うと）バグる」
「intでサイズを指定しても、サイズが(11)で固定される」


・DB周りの知識が要求される
Laravel 単体で動くワケではなく、MySQL と密接に繋がっているため、それらの知識も要求される。
後述の理由もあり、自信が無いなら積極的に触らない方が無難。


・失敗した時、リカバリが大変
記述したコードが間違っていた場合、たいてい MySQL のスキーマが崩れてしまう。
その時、テーブル構成および、RDB周りの知識が無いと、原因の究明やリカバリが極めて難しくなる。


・確実性が要求される
migration が上手く動かないコードをアップしてしまうと、開発者全員に迷惑がかかる。
具体的には、スキーマの更新が上手く行かず、開発の続行が不可能になる。
また、そうなってしまった場合、多くの場合は原因の特定に時間がかかる。
（「荒いが早い」エンジニアは、間違いなくこの工程に向いていない）
そのため、「テストが不十分だけど、多分大丈夫だと思う」といった、不安材料のあるコードは、アップするべきではない。
また、スキーマの更新が上手く行った事を確認するのは重要だが、同時にロールバックして元の状態に戻ることも保証するべきなので、気を回す部分は結構多い。


・気を遣ってコードを書かないと、全ての開発者に迷惑がかかる
例えば、drop tablek → create 
みたいな命令を書いてしまうと、これまで開発で使用していたデータが全て消えてしまう。
開発者全員に迷惑をかけないよう、注意してコードを書く必要がある。



・作業の分割が難しい
migration は、上から順番に実行されるため、ブランチを切って途中で他者が作業を挟む事が難しい場面がある。（全部が新規作成テーブルならアリだけど）
例えば、作業者A がカラム名を変更した場合、作業者B が同一カラムに対して何かしらの変更を加えるとしたら、
作業者B の変更内容は、作業者A の変更前に実行されるべきなのか/後に実行されるべきなのか、判断が難しくなってくる。


・レビューを入れるのが手間
以上の理由から、



〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓


https://www.chatwork.com/#!rid204976851-1408650969570344960
向井　彩夏株式会社はぴロジ[To:437637]樽井博司さん
すみません。発注点メールの時間指定設定も必要でいいですよね。
設定画面は「荷主オプション設定」で、値も荷主オプションテーブルの中に持つでよかったでしょうか？

================================================================================================


樽井博司株式会社　はぴロジ[返信 aid=4663712 to=204976851-1408650969570344960]向井　彩夏さん
　⇒画面としては、「発注点メールのOn/Off設定」と同じ画面で設定できるようにしたいです
　　＜機能のOn／Offと、送信時間設定が別箇所というのは、わかりづらい＞

　　　⇒時間指定方法
　　　　プルダウン／30分単位／1日1回限定／条件日ごとのみで、その他指定なし[曜日等]　が良いです

[To:5252001]垣花 暁さん
　⇒上記の場合、時刻設定値を持つ場所は、オプションテーブルで支障ないでしょうか


〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓


今さらですけど、
「システムのコアとなる部分を他社に設計してもらって、ウチはそれをレビューするだけ」
という構図が、後でネックになりそうな気が。。。

コア機能の作り込みを自社の人間が手を付けていない（設計やコーディングレベルで試行錯誤した時のノウハウが自社の人間に蓄積されて行かない）というのが、後々響いてくる気がしています。

「最終的にこうなった」というのは分かっても、
「（試行錯誤して）この方法では上手く行かなかった」というのは、後々貴重な情報として生きてくる事は多いので、

自社サービスを展開する会社が、「コア機能は他社が作ってます」というのは、色々とマズい気もする。。。
I井さんにも入ってもらった方がいいだろうか。



〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓

今しがた、300ヘッダを1リクエストで投入したところ、DynamoDBのキャパシティユニットの制限に引っかかったようです。
------------------------------------------------------------------------------------------------------
    "message": "Error executing \"BatchWriteItem\" on \"https://dynamodb.ap-northeast-1.amazonaws.com\"; AWS HTTP error: Client error: `POST https://dynamodb.ap-northeast-1.amazonaws.com` resulted in a `400 Bad Request` response:\n{\"__type\":\"com.amazonaws.dynamodb.v20120810#ProvisionedThroughputExceededException\",\"message\":\"The level of configured p (truncated...)\n ProvisionedThroughputExceededException (client): The level of configured provisioned throughput for the table was exceeded. Consider increasing your provisioning level with the UpdateTable API. - {\"__type\":\"com.amazonaws.dynamodb.v20120810#ProvisionedThroughputExceededException\",\"message\":\"The level of configured provisioned throughput for the table was exceeded. Consider increasing your provisioning level with the UpdateTable API.\"}",
    "exception": "Aws\\DynamoDb\\Exception\\DynamoDbException",
------------------------------------------------------------------------------------------------------

なお、DynamoDBへのインサートの際には最大バルク数である25レコードごとに分割してインサートしております。
バルク未実装で100ヘッダを投入した時は受付処理全体が60秒ほどかかっていましたが、バルク実装した後は100ヘッダで6秒ほどに改善されました。
ですので、同じ速度感が保たれているのであれば、24秒で12バルクリクエストを投入しようとしている計算になります。
また、投入したデータのサイズは300ヘッダで約1.6MBです。
なお、今回投入したデータはサンプルデータですので、1ヘッダあたりのデータサイズはこれよりも更に多くなる可能性が高いです。

キャパシティユニットの設計に関してご意見を伺いたいのですが、お時間大丈夫でしょうか？

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓
〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓

phpf
〓〓〓〓〓

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
phpcs 
　→警告のみ
https://www.youtube.com/watch?v=Fc9y-w7SvH8


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

php cs fixer

PHP-CS-Fixer

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


php cs fixer






=======================================================================================================================




マテリアルデザインを使ったことによるデメリット


TailWindの自由度
・あくまでCSSなんで、コンポーネントが一切無い
・React 用のライブラリはあるが、完全に第三者。しかも２年前に更新が止まっている。

〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓



入力バリデーション
SQLインジェクション
LDAPインジェクション
OSコマンドインジェクション
XPATHインジェクション
ファイルパスインジェクション
メールヘッダインジェクション
HTTPヘッダインジェクション
Nullバイト攻撃


〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓〓


