スケジューラから起動するコマンド[?] は、設定により無効となっているため、実行されませんでした。。
スケジューラからコマンドを起動します。[command]:?
スケジューラから開始したコマンドが正常終了しました。
スケジューラから開始したコマンドはエラー終了しました。

スケジューラ：補足できないエラーが発生しました。


指定された日付が不正です    The specified date is invalid
指定された日時が不正です    The specified datetime is invalid
コマンドを処理を開始します。
コマンドを正常終了しました。
エラーが発生しました。





===================================================================



-
RecoredLogiIODailyANaliticsTracksCommand
-
SendOrderEMailCommand
-
DestroyLogiRecordCommand

-
ExecuteByJobSchedulerCommand
-
UnlockAccountCommand


==================================================================================================
==================================================================================================
==================================================================================================
==================================================================================================
==================================================================================================



https://nlab.itmedia.co.jp/nl/articles/1801/07/news008_3.html

> 「FF3」に登場した通常歩行の8倍のスピードで移動する飛空艇「ノーチラス」は、
> 当時スクウェアに所属した天才プログラマー、ナーシャ・ジベリ氏の手により、ファミコンのバグに近い仕様を利用したもので実現したそうです。
> ただし彼の組むプログラムは非常に独特かつ高度で、FF3が人気にもかかわらず長らくリメイクされなかったのは、
> 誰も当時そのままに再現できないから、などというウワサまで囁かれました。


https://gigazine.net/news/20140818-reason-pinball-removed-from-vista/

> このゲームのソースコードは何年も前に外部のサプライヤーが書いたものであり、マイクロソフトの内部の人は詳細を把握していないこと、
> しかも、ソース内にはプログラムの内容を記述するコメントが一切記載されていなかったため原因究明は困難を極め、
> ゲームを作る上で最も基本的な処理の一つである当たり判定について書かれている場所さえ見つけることができなかったとのこと。




==================================================================================================
==================================================================================================
==================================================================================================
==================================================================================================
==================================================================================================


Batch01Command successful.

(was)
正しくは、「Batch01Command was successful.」ログに出力する場合、"was" は取ること多い、


was successful
successful


--------------------
$numOfResult
$nRes
res


結果件数
$numOfResult = $this->model->query()
                ->where('id', 1)
                ->delete();


---
実験的なコード
サンプルコマンド

sampleExecute()


pruebaMethod
---


$sql = \App\Utils\DebugUtil::getEloquentSqlWithBindings($query);
\Log::info($sql);


$paramFilledSql = \App\Utils\DebugUtil::getEloquentSqlWithBindings($query);

----
[2021-07-22 05:43:24] local.INFO: 
select
    *
from
    `authors`
where not exists (
                    select
                        *
                    from
                        `books`
                    where  `authors`.`id` = `books`.`author_id`
                      and  `title` like ?
                      and `books`.`deleted_at` is null
                 ) 
  and `gender` = ?
  and `authors`.`deleted_at` is null  



[2021-07-22 05:43:24] local.INFO: 
select
    *
from
    `authors`
where not exists (
                    select
                        *
                    from
                        `books`
                    where  `authors`.`id` = `books`.`author_id`
                      and  `title` like '%猫%'
                      and `books`.`deleted_at` is null
                 ) 
  and `gender` = 1
  and `authors`.`deleted_at` is null  
----

https://kaki-note-02.netlify.app/2021/07/21/

[2021-07-20 04:55:59] AAAAA  
[2021-07-20 04:56:03] Batch01Command::handle  
[2021-07-20 04:56:13] Batch01Command::handle: after 20 second  
[2021-07-20 04:56:23] Batch01Command::handle: after 40 second  
[2021-07-20 04:56:33] Batch01Command::handle: after 60 second  



20 seconds later
20 seconds later from start of job.

20 seconds passed from start of job.
20 seconds after start of job.


after 60 second
60 seconds later

=========================================


削除するまでの期間
Period until deletion
Date until deletion

削除するまで保持する日にち
Date to keep until deleted


holding period until deration

https://github.com/sebastiaanluca/laravel-router

________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
DatabaseSeeder

use HasFactory;


________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________
________________________________________________________________________________


abort
abort_if

## リソースの生成
https://readouble.com/laravel/8.x/ja/eloquent-resources.html


## laravelのAPIリソース
https://qiita.com/zdjjs/items/1c2437fcdd35c6754bc


## Eloquent: API Resources
https://laravel.com/docs/8.x/eloquent-resources



_____________________________________________________________________________


==================================

bootstrap/cache/ 配下を削除

==================================

```
php artisan cache:clear
php artisan config:clear
php artisan optimize:clear
composer dump-autoload
```

php artisan optimize:clear
```
php artisan view:clear
php artisan route:clear
php artisan config:clear
php artisan cache:clear
php artisan config:cache
php artisan optimize
php artisan clear-compiled
```


==================================================================================================
==================================================================================================
==================================================================================================
==================================================================================================
==================================================================================================






shipper_job_processes

shipper_job_status_histories -> 採用

【 shipper_job_processing_histories 】
親荷主ジョブID               parent_shipper_job_id
子荷主ジョブID               child_shipper_job_id
子荷主ジョブシーケンスNo.    child_shipper_job_sequence_no
処理状況                     message

    progress_message

========================================================================


10
LINK_EXECUTE_STATUS
連携処理中
取得データを作成中
 -> PROGRESSING_GETTING_RECORD_STATUS

【DOWNLOADING_STATUS】


-------------------------------------------
1
FAILED_STATUS
取込不能 -> 取込不可
 -> IMPORT_FAILED_STATUS

2
PROCESSING_STATUS
受付中
 -> ACCEPTING_STATUS
    APPLYING_STATUS

3
RECEPTION_COMPLETE_STATUS
受付完了 -> 待ち受け
 -> WAITING_STATUS

4
MAPPING_STATUS
マッピング処理中
 -> PROGRESSING_MAPPING_STATUS

mapping in progress

5
MAPPING_COMPLETE_STATUS
マッピング完了
 -> MAPPING_COMPLETED_STATUS

6
IMPORTING_STATUS
取込処理中
 -> PROGRESSING_IMPORTING

7
IMPORTED_WITH_ERROR_STATUS
エラーあり取込完了
 -> IMPORTED_WITH_ERROR_STATUS

8
IMPORTED_STATUS
取込完了
 -> IMPORTING_COMPLETED_STATUS

9
ALLOCATION_STATUS
引当処理中
 -> PROGRESSING_ALLOCATION_STATUS

10
LINK_EXECUTE_STATUS
連携処理中
取得データを作成中
 -> PROGRESSING_GETTING_RECORD_STATUS

11
LINK_DATA_CREATE_ERROR_STATUS
連携データ作成エラー
取得データを作成に失敗
 -> CREATED_RECORD_WITH_ERROR_STATUS

12
LINK_DATA_WAIT_LINK_STATUS
連携待ち
取得データの作成が完了
 -> WAITING_FOR_RECORD_STATUS
    CREATING_FOR_RECORD

13
EXPORTING_STATUS
連携中
取得データをダウンロード中
 -> DOWNLOADING_RECORD_STATUS

14
EXPORT_ERROR_STATUS
連携エラー
ダウンロードに失敗
 -> GOT_RECORD_WITH_ERROR_STATUS




RECORD
